from abc import ABC, abstractmethod
from typing import Iterable, List, Iterator

from pyfranc import franc

from .கருவிகள் import nchbl, சுத்தமான_உரை
from ..இணைப்பு import இணைப்பு
from ..உருப்படி import உருப்படி
from ..உரை import உரை
from ..எண் import எண்
from ..கருவிகள் import எழுத்தாளர்_வடிவம்
from ..நிறுத்தற்குறிகள் import அரைகால்ப்புள்ளி, இடைவெளி, இணைப்புச்சிறுகோடு, மூன்றுபுள்ளிகள், பிரிக்க_முடியாத_இடைவெளி
from ..பத்தி import பத்தி
from ..மொழி_உரை import மொழிபெயர்க்கக்கூடிய_உரை
from ...வடிவம் import பத்தி_வடிவம்


class வெளியீடு(உருப்படி, ABC):
    def __init__(தன், தகவல்கள்: dict[str, str], எழுத்தாளர்_வடிவூட்டி: எழுத்தாளர்_வடிவம் = None):
        super().__init__()
        தன்.தகவல்கள் = தகவல்கள்
        தன்.எழுத்தாளர்_வடிவூட்டி = எழுத்தாளர்_வடிவூட்டி
        தன்.அடையாளம் = தகவல்கள்["ID"]
        தன்.தலைப்பு = சுத்தமான_உரை(தகவல்கள்["title"])

        தன்.எழுத்தாளர்கள் = சுத்தமான_உரை(தகவல்கள்["author"]).split(" and ") if "author" in தகவல்கள் else []
        தன்.ஆண்டு = int(தகவல்கள்["year"]) if "year" in தகவல்கள் else None
        தன்.பக்கங்கள் = தகவல்கள்["pages"].split("--") if "pages" in தகவல்கள் else None
        தன்.எண்ணிம_ஆவணச்சுட்டி = தகவல்கள்["doi"] if "doi" in தகவல்கள் else None

        try:
            வெளியீட்டின்_மொழி = nchbl.rubiChabäl(
                தகவல்கள்["language"] if "language" in தகவல்கள் else franc.lang_detect(தன்.தலைப்பு)[0][0], 'iso'
            )

            தன்.வெளியீட்டின்_மொழி = nchbl.runukChabäl(வெளியீட்டின்_மொழி, None) or franc.lang_detect(தன்.தலைப்பு)[0][0]
        except ValueError:
            தன்.வெளியீட்டின்_மொழி = franc.lang_detect(தன்.தலைப்பு)[0][0]

    def உருப்படிகள்(தன்) -> Iterator["உருப்படி"]:
        பத்தி_உரைகள் = தன்.வெளியீட்டின்_உருப்படிகள்()
        yield பத்தி(பத்தி_உரைகள், பத்தி_வடிவம்(கீழ்_ஓரம்=0.25, உள்தள்ளல்=-0.5))

    @abstractmethod
    def வெளியீட்டின்_உருப்படிகள்(தன்) -> List["உருப்படி"]:
        pass

    def எழுத்தாளர்களை_வெளியிடு(தன், அதிகப்பட்ச_எழுத்தாளர்கள்=10) -> Iterable[உருப்படி]:
        எழுத்தாளர்கள் = []
        if len(தன்.எழுத்தாளர்கள்) > அதிகப்பட்ச_எழுத்தாளர்கள்:
            இறுதியான_எழுத்தாளர்கள் = தன்.எழுத்தாளர்கள்[:அதிகப்பட்ச_எழுத்தாளர்கள்]
        else:
            இறுதியான_எழுத்தாளர்கள் = தன்.எழுத்தாளர்கள்
        for எழுத்தாளர் in இறுதியான_எழுத்தாளர்கள்:
            if len(எழுத்தாளர்கள்):
                எழுத்தாளர்கள்.extend(
                    [அரைகால்ப்புள்ளி(), இடைவெளி()]
                )
            எழுத்தாளரின்_வடிவம் = தன்.எழுத்தாளர்_வடிவூட்டி.வடிவம்(எழுத்தாளர்) if தன்.எழுத்தாளர்_வடிவூட்டி else None
            எழுத்தாளர்கள்.append(
                உரை(
                    எழுத்தாளர்,
                    வடிவம்=எழுத்தாளரின்_வடிவம்
                )
            )
        if len(தன்.எழுத்தாளர்கள்) > அதிகப்பட்ச_எழுத்தாளர்கள்:
            எழுத்தாளர்கள்.extend([இடைவெளி(), மூன்றுபுள்ளிகள்(), இடைவெளி()])
        return எழுத்தாளர்கள்

    def பக்கங்களை_வெளியிடு(தன்) -> List[உருப்படி]:
        if தன்.பக்கங்கள்:
            if len(தன்.பக்கங்கள்) > 1:
                பக்கங்கள் = [எண்(int(தன்.பக்கங்கள்[0])), இணைப்புச்சிறுகோடு(), எண்(int(தன்.பக்கங்கள்[1]))]
            else:
                try:
                    பக்கங்கள் = [எண்(int(தன்.பக்கங்கள்[0]))]
                except ValueError:
                    பக்கங்கள் = [உரை(தன்.பக்கங்கள்[0])]
        else:
            பக்கங்கள் = []

        return பக்கங்கள்

    def எண்ணிம_ஆவணச்சுட்டியை_வெளியிடு(தன்) -> List[உருப்படி]:
        if தன்.எண்ணிம_ஆவணச்சுட்டி:
            return [
                மொழிபெயர்க்கக்கூடிய_உரை(உரை="doi:", மூல்_மொழி="eng", மூல்_சாபி="வெளியீடு"), பிரிக்க_முடியாத_இடைவெளி(),
                இணைப்பு(உரை=தன்.எண்ணிம_ஆவணச்சுட்டி, இணைப்பு=f"https://doi.org/{தன்.எண்ணிம_ஆவணச்சுட்டி}")
            ]
        else:
            return []
