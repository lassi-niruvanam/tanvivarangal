import warnings
from typing import Iterator

import bibtexparser

from .கட்டுரை import கட்டுரை
from .நூல் import நூல்
from .நூல்_அத்தியாயம் import நூல்_அத்தியாயம்
from .மாநாடு_கட்டுரை import மாநாடு_கட்டுரை
from ..உருப்படி import உருப்படி
from ..கருவிகள் import எழுத்தாளர்_வடிவம்


class வெளியீடுகள்(உருப்படி):

    def __init__(
            தன்,
            பிப்தேக்ஸ்_கோப்பு: str,
            எழுத்தாளர்_வடிவூட்டி: எழுத்தாளர்_வடிவம் = None,
            வரிசைப்படுத்தி: "வெளியீடு_வரிசைப்படுத்தி" = None
    ):
        super().__init__()
        தன்.எழுத்தாளர்_வடிவூட்டி = எழுத்தாளர்_வடிவூட்டி
        தன்.வரிசைப்படுத்தி = வரிசைப்படுத்தி or தேதி_வரிசைப்படுத்தி()

        with open(பிப்தேக்ஸ்_கோப்பு) as f:
            தன்.பட்டியல் = bibtexparser.load(f)

    def உருப்படிகள்(தன்) -> Iterator["உருப்படி"]:
        உருப்படிகள் = []
        for ப in தன்.பட்டியல்.entries:
            if உரு := தன்._உருப்படியை_உருவாக்கு(ப):
                உருப்படிகள்.append(உரு)
        yield from தன்.வரிசைப்படுத்தி(உருப்படிகள்)

    def _உருப்படியை_உருவாக்கு(தன், தகவல்கள்: dict[str, str]):
        வகை = தகவல்கள்["ENTRYTYPE"]
        if வகை == "article":
            return கட்டுரை(தகவல்கள், தன்.எழுத்தாளர்_வடிவூட்டி)
        elif வகை == "book":
            return நூல்(தகவல்கள், தன்.எழுத்தாளர்_வடிவூட்டி)
        elif வகை == "inproceedings":
            return மாநாடு_கட்டுரை(தகவல்கள், தன்.எழுத்தாளர்_வடிவூட்டி)
        elif வகை == "incollection":
            return நூல்_அத்தியாயம்(தகவல்கள், தன்.எழுத்தாளர்_வடிவூட்டி)
        else:
            warnings.warn("தெரியாத வெளியீடு வகை " + வகை)


class வெளியீடு_வரிசைப்படுத்தி(object):
    def __init__(தன், இறங்குவரிசை=True):
        தன்.இறங்குவரிசை = இறங்குவரிசை

    def __call__(தன், வெளியீடுகள்: Iterator["உருப்படி"]):
        return வெளியீடுகள்


class தேதி_வரிசைப்படுத்தி(வெளியீடு_வரிசைப்படுத்தி):
    def __call__(தன், வெளியீடுகள்: Iterator["உருப்படி"]):
        return sorted(வெளியீடுகள், key=lambda இ: இ.ஆண்டு, reverse=தன்.இறங்குவரிசை)
