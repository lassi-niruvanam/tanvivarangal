import json
import os
import shutil
import subprocess
import tempfile
from typing import Iterable, Optional

from deepmerge import always_merger
from odfdo import Document

from .உருப்படி import உருப்படி
from .உருப்படி.கருவிகள் import எழுத்தாளர்_வடிவம், நான்_தடிமன்_எழுத்தாளர்_வடிவம்
from .உருப்படி.தலைப்பு import தலைப்பு
from .உருப்படி.பெயர் import பெயர்_தலைப்பு
from .உருப்படி.வெளியீடுகள்.வெளியீடுகள் import வெளியீடுகள்
from .மொழிபெயர்ப்பாளர்.மொழிபெயர்ப்பாளர் import மொழிபெயர்ப்பாளர், ஜெஸான்_மொழிபெயர்ப்பாளர்
from .வடிவம் import தேவையான_வடிவங்கள்


class சுயவிவரங்கள்(object):
    def __init__(
            தன், மூல்_மொழி: str, மொழிபெயர்ப்பு: Optional[மொழிபெயர்ப்பாளர்] = None,
            மொழிபெயர்ப்பு_கோப்புரை: Optional[str] = "மொழிபெயர்ப்புகள்"
    ):
        தன்.உருப்படிகள்: list[உருப்படி] = []
        தன்.மூல்_மொழி = மூல்_மொழி
        தன்.மொழிபெயர்ப்பு_கோப்புரை = மொழிபெயர்ப்பு_கோப்புரை
        தன்.மொழிபெயர்ப்பாளர் = மொழிபெயர்ப்பு or ஜெஸான்_மொழிபெயர்ப்பாளர்(கோப்புரை=தன்.மொழிபெயர்ப்பு_கோப்புரை)

    def உருப்படியைச்_சேர்(தன், உரு: உருப்படி):
        தன்.உருப்படிகள்.append(உரு)

    def பெயர்(தன், உரை: str, மூல்_மொழி: Optional[str] = None):
        தன்.உருப்படியைச்_சேர்(பெயர்_தலைப்பு(உரை, மூல்_மொழி=மூல்_மொழி or தன்.மூல்_மொழி))

    def தலைப்பு(தன், உரை: str):
        தன்.உருப்படியைச்_சேர்(தலைப்பு(உரை, மூல்_மொழி=தன்.மூல்_மொழி))

    def வெளியீடுகள்(தன், கோப்பு: str, எழுத்தாளர்_வடிவூட்டி: எழுத்தாளர்_வடிவம் = None):
        if எழுத்தாளர்_வடிவூட்டி is None:
            try:
                என்_பெயர் = next(உரு for உரு in தன்.உருப்படிகள் if isinstance(உரு, பெயர்_தலைப்பு)).பெயர்
            except StopIteration:
                என்_பெயர் = []

            எழுத்தாளர்_வடிவூட்டி = நான்_தடிமன்_எழுத்தாளர்_வடிவம்([என்_பெயர்])

        தன்.உருப்படியைச்_சேர்(வெளியீடுகள்(கோப்பு, எழுத்தாளர்_வடிவூட்டி))

    def வெளியிடு(
            தன், மொழி: str | Iterable[str] = None, வடிவூட்டம்: str | Iterable[str] = "pdf", கோப்பு="சுயவிவரங்கள்"
    ):
        மொழி = மொழி or தன்.மூல்_மொழி
        if isinstance(மொழி, str):
            மொழி = [மொழி]
        for மொ in மொழி:
            with tempfile.TemporaryDirectory() as கோப்புரை:
                ஒடியெஃப்_ஆவணம் = தன்.ஓடியெஃப்_உருவாக்கு(மொ)
                ஒடியெஃப்_கோப்பு_முகவரி = os.path.join(கோப்புரை, "கோப்பு.odt")
                ஒடியெஃப்_ஆவணம்.save(ஒடியெஃப்_கோப்பு_முகவரி)

                if "odt" in வடிவூட்டம்:
                    shutil.copy(os.path.join(கோப்புரை, 'கோப்பு.odt'), f"{கோப்பு}_{மொ}.odt")

                if "pdf" in வடிவூட்டம்:
                    subprocess.run(
                        ["/Applications/LibreOffice.app/Contents/MacOS/soffice", "--convert-to", "pdf", "கோப்பு.odt"],
                        cwd=கோப்புரை)
                    shutil.move(os.path.join(கோப்புரை, 'கோப்பு.pdf'), f"{கோப்பு}_{மொ}.pdf")

    def ஓடியெஃப்_உருவாக்கு(தன், மொழி: str) -> Document:
        ஆவணம் = Document('text')
        வடிவங்கள் = தேவையான_வடிவங்கள்()

        for உ in தன்.உருப்படிகள்:
            வெளியீடு = உ.வெளியிடு(மொழி=மொழி, மொழியாக்கம்=தன்.மொழிபெயர்ப்பாளர், வடிவங்கள்=வடிவங்கள்)
            for ஒடியெஃப்_உருப்படி in வெளியீடு:
                ஆவணம்.body.append(ஒடியெஃப்_உருப்படி)

        for வடிவம் in வடிவங்கள்.வடிவங்கள்:
            ஆவணம்.insert_style(வடிவம்)

        return ஆவணம்

    def மொழிபெயர்ப்பு_கோப்புகளை_உருவாக்கு(தன், வேண்டிய_மொழிகள்: list[str]):
        மொழியாக்கத்துக்காக: dict[str, dict[str, str]] = {மொழி: {} for மொழி in வேண்டிய_மொழிகள்}

        for உரு in தன்.உருப்படிகள்:
            மொழியாக்கத்துக்காக = always_merger.merge(மொழியாக்கத்துக்காக, உரு.மொழியாக்கத்துக்காக())

        def சாபிகளை_பெறு(
                அகராதி, சூழ்நிலை: Optional[str] = None, இருக்கும்_சாபிகள்: Optional[set[str]] = None
        ) -> set[str]:
            இருக்கும்_சாபிகள்: set[str] = இருக்கும்_சாபிகள் or set()
            for சாபி, மதிப்பு in அகராதி.items():
                சூழ்நிலையின்_சாபி = சூழ்நிலை + "." + சாபி if சூழ்நிலை else சாபி
                if isinstance(மதிப்பு, dict):
                    சாபிகளை_பெறு(மதிப்பு, சூழ்நிலை=சூழ்நிலையின்_சாபி)
                else:
                    இருக்கும்_சாபிகள்.add(சூழ்நிலையின்_சாபி)

            return இருக்கும்_சாபிகள்

        வேண்டிய_சாபிகள் = {ஈ for இ in மொழியாக்கத்துக்காக.values() for ஈ in சாபிகளை_பெறு(இ)}

        def சாபிகளை_சேரு(அகராதி, சாபிகள்: Iterable[str]):
            for சாபி in சாபிகள்:
                சாபி_பகுதிகள் = சாபி.split(".")
                துணை_அகராதி = அகராதி
                for இ, பகுதி in enumerate(சாபி_பகுதிகள்):
                    if பகுதி not in துணை_அகராதி:
                        அகராதி[பகுதி] = "" if இ == (len(சாபி_பகுதிகள்) - 1) else {}
                    துணை_அகராதி = அகராதி[பகுதி]

        if not os.path.isdir(தன்.மொழிபெயர்ப்பு_கோப்புரை):
            os.makedirs(தன்.மொழிபெயர்ப்பு_கோப்புரை)

        for மொழி, பெயர்ப்புகள் in மொழியாக்கத்துக்காக.items():
            மொழிபெயர்ப்பு_கோப்பு = os.path.join(தன்.மொழிபெயர்ப்பு_கோப்புரை, f"{மொழி}.json")
            if os.path.isfile(மொழிபெயர்ப்பு_கோப்பு):
                with open(மொழிபெயர்ப்பு_கோப்பு, encoding="utf8", mode="r") as கோ:
                    try:
                        இருக்கும்_மொழிபெயர்ப்புகள் = json.load(கோ)
                        பெயர்ப்புகள் = always_merger.merge(இருக்கும்_மொழிபெயர்ப்புகள், பெயர்ப்புகள்)
                    except json.decoder.JSONDecodeError:
                        pass
            சாபிகளை_சேரு(பெயர்ப்புகள், வேண்டிய_சாபிகள்)
            with open(மொழிபெயர்ப்பு_கோப்பு, encoding="utf8", mode="w") as கோ:
                json.dump(பெயர்ப்புகள், கோ, ensure_ascii=False, indent=2)
